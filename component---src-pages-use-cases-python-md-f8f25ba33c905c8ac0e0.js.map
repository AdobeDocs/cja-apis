{"version":3,"file":"component---src-pages-use-cases-python-md-f8f25ba33c905c8ac0e0.js","mappings":"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","sources":["webpack://cja-apis/./src/pages/use-cases/python.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/cja-apis/cja-apis/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"use-cja-api-with-python\"\n    }}>{`Use CJA API with Python`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://www.python.org/\"\n      }}>{`Python`}</a>{` is a powerful and easy to learn programming language. It has several libraries that allow you to create API calls. This page uses the `}<a parentName=\"p\" {...{\n        \"href\": \"https://pypi.org/project/requests/\"\n      }}><inlineCode parentName=\"a\">{`requests`}</inlineCode></a>{` library to make API calls to Customer Journey Analytics.`}</p>\n    <h2 {...{\n      \"id\": \"prerequisites\"\n    }}>{`Prerequisites`}</h2>\n    <p>{`Make sure that you meet all requirements on the `}<a parentName=\"p\" {...{\n        \"href\": \"../getting-started/index.md\"\n      }}>{`Getting started`}</a>{` page, including:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Your user account belongs to the correct product profile in the `}<a parentName=\"li\" {...{\n          \"href\": \"https://adminconsole.adobe.com\"\n        }}>{`Adobe Admin Console`}</a></li>\n      <li parentName=\"ul\">{`An API client created in the `}<a parentName=\"li\" {...{\n          \"href\": \"https://console.adobe.io\"\n        }}>{`Adobe Developer Console`}</a></li>\n      <li parentName=\"ul\">{`You have generated a JWT (JSON Web Token), via the Service Account Integration or by your own script.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"1-preparing-your-header\"\n    }}>{`1. Preparing your header`}</h2>\n    <p>{`Once you possess your token, you can prepare a header to realize the requests with the `}<inlineCode parentName=\"p\">{`requests`}</inlineCode>{` module. In `}<inlineCode parentName=\"p\">{`requests`}</inlineCode>{`, the header is a dictionary, consisting of key value pairs. The CJA API requires 3 components on your header:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Your Token with the `}<inlineCode parentName=\"li\">{`authorization`}</inlineCode>{` key and `}<inlineCode parentName=\"li\">{`\"Bearer \"`}</inlineCode>{` as a start.`}</li>\n      <li parentName=\"ul\">{`Your Organization ID with the `}<inlineCode parentName=\"li\">{`x-gw-ims-org-id`}</inlineCode>{` key`}</li>\n      <li parentName=\"ul\">{`Your client ID with the `}<inlineCode parentName=\"li\">{`x-api-key`}</inlineCode>{` key.`}</li>\n    </ul>\n    <p>{`For example, your dictionary would look similar to the following example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`myHeader = {\n    \"x-gw-ims-org-id\" : \"EXAMPLE@AdobeOrg\",\n    \"x-api-key\" : \"example-client-id\",\n    \"authorization\" : \"Bearer example-authorization-value\"\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"2-sending-the-request\"\n    }}>{`2. Sending the request`}</h2>\n    <p>{`Once you have your header ready, you can start loading and using the `}<inlineCode parentName=\"p\">{`requests`}</inlineCode>{` module. For example you can send a request to the `}<inlineCode parentName=\"p\">{`/aresconfig/users/me`}</inlineCode>{` endpoint:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import requests\nres = requests.get(\"https://cja.adobe.io/aresconfig/users/me\", headers=myHeader)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"3-using-responses-from-the-cja-api\"\n    }}>{`3. Using responses from the CJA API`}</h2>\n    <p>{`Once you receive a response from Adobe, you can use the `}<inlineCode parentName=\"p\">{`.json()`}</inlineCode>{` method on it to return the data returned by the CJA API. In the above example, the response is captured in the `}<inlineCode parentName=\"p\">{`res`}</inlineCode>{` variable. The below example uses this `}<inlineCode parentName=\"p\">{`res`}</inlineCode>{` variable to parse the response into a new variable.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`myData = res.json()\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`myData`}</inlineCode>{` variable would contain a value similar to the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`{\n 'id': 'EXAMPLE@techacct.adobe.com',\n 'email': 'example@techacct.adobe.com',\n 'fullName': ''\n}\n`}</code></pre>\n    <InlineAlert variant=\"help\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Your user is the JWT application itself if you use JWT to authenticate.`}</p>\n    <h2 {...{\n      \"id\": \"other-use-cases\"\n    }}>{`Other use-cases`}</h2>\n    <h3 {...{\n      \"id\": \"sending-data-with-query-parameters\"\n    }}>{`Sending data with query parameters`}</h3>\n    <p>{`Query parameters are elements following the question mark in a URL. For example, `}<inlineCode parentName=\"p\">{`?param=value`}</inlineCode>{`.`}</p>\n    <p>{`When requesting the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.adobe.io/cja-apis/docs/api/#operation/getDataViewsForCompany\"\n      }}>{`data views for a company`}</a>{`, you use the following path: `}<inlineCode parentName=\"p\">{`/datagroups/dataviews`}</inlineCode>{`. However, a normal request (`}<inlineCode parentName=\"p\">{`requests.get(\"https://cja.adobe.io/datagroups/dataviews\",headers=myHeader)`}</inlineCode>{`) only returns the following response:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`{\n  'content': [\n    {'id': 'dv_exampleid1'},\n    {'id': 'dv_exampleid2'},\n    {'id': 'dv_exampleid3'}\n   ],\n  'totalPages': 1,\n  'totalElements': 3,\n  'numberOfElements': 3,\n  'number': 0,\n  'firstPage': True,\n  'lastPage': True,\n  'sort': None,\n  'size': 10\n}\n`}</code></pre>\n    <p>{`This is not typically useful as you miss some elements that easily identify the data view. If you use the `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`owner`}</inlineCode>{` query parameters, you can retrieve more interesting information. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`parameters = {'expansion':'name,owner'}\nrequests.get(\"https://cja.adobe.io/datagroups/dataviews\", headers=myHeader, params=parameters)\n`}</code></pre>\n    <p>{`Now the response contains additional information:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`{\n  'content': [{\n      'name': 'Web Call Example Data View',\n      'owner': {'imsUserId': 'EXAMPLE1@AdobeID', 'name': None},\n      'id': 'dv_exampleid1'\n    }, {\n      'name': 'All Datasets Example',\n      'owner': {'imsUserId': 'EXAMPLE2@AdobeID', 'name': None},\n      'id': 'dv_exampleid2'\n    }, {\n      'name': 'Example (default)',\n      'owner': {'imsUserId': 'EXAMPLE3@AdobeID', 'name': None},\n      'id': 'dv_exampleid3'\n    }\n  ],\n  'totalElements': 3,\n  'totalPages': 1,\n  'numberOfElements': 3,\n  'number': 0,\n  'firstPage': True,\n  'lastPage': True,\n  'sort': None,\n  'size': 10\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"sending-data-in-the-body-of-the-request\"\n    }}>{`Sending data in the body of the request`}</h3>\n    <p>{`You can update or create a component by sending data in the body of a request. That type of API call is typically either a `}<inlineCode parentName=\"p\">{`POST`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`PUT`}</inlineCode>{` request.`}</p>\n    <InlineAlert variant=\"help\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p><inlineCode parentName=\"p\">{`PUT`}</inlineCode>{` request completely overwrites the previous data held in the component. Excercise caution when editing components.`}</p>\n    <p>{`Data sent to the Customer Journey Analytics API is typically through a python dictionary. The easiest method to send data is to stringify the JSON element via the `}<inlineCode parentName=\"p\">{`json`}</inlineCode>{` module. You can use the following example to help format the body of your API call.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`creationDataView = {\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"owner\": {\n    \"imsUserId\": \"string\",\n    \"name\": \"string\"\n  },\n  \"isDeleted\": true,\n  \"parentDataGroupId\": \"string\",\n  \"segmentList\": [\n    \"string\"\n  ],\n  \"currentTimezoneOffset\": 0,\n  \"timezoneDesignator\": \"string\",\n  \"modifiedDate\": \"YYYY-08-24T14:15:22Z\",\n  \"createdDate\": \"YYYY-08-24T14:15:22Z\",\n  \"organization\": \"string\",\n  \"modifiedBy\": \"string\",\n  \"curationEnabled\": true,\n  \"recentRecordedAccess\": \"YYYY-08-24\",\n  \"sessionDefinition\": [{}],\n  \"curatedComponents\": [{}],\n  \"externalData\": {\n    \"externalId\": \"string\",\n    \"externalParentId\": \"string\"\n  },\n  \"containerNames\": {\n    \"event\": \"string\",\n    \"session\": \"string\",\n    \"people\": \"string\"\n  },\n  \"id\": \"string\"\n}\n`}</code></pre>\n    <p>{`Once you have this definition established (`}<inlineCode parentName=\"p\">{`creationDataView`}</inlineCode>{` in the above example), you can use it in an API call. The following example uses the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.adobe.io/cja-apis/docs/api/#operation/getDataViewsForCompany\"\n      }}>{`Data view creation API`}</a>{` and includes the above JSON object in its body:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import json\nresCreation = requests.post(\"https://cja.adobe.io/datagroups/dataviews\", headers=myHeader, data=json.dumps(creationDataView))\n`}</code></pre>\n    <p>{`The response from Adobe would looks similar to the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`resCreation.json()\n\n## Response from Adobe\n{\n  \"name\": \"string\",\n  \"description\": \"string\",\n  \"owner\": {\n    \"imsUserId\": \"string\",\n    \"name\": \"string\"\n    },\n  \"isDeleted\": true,\n  \"parentDataGroupId\": \"string\",\n  \"segmentList\": [\n    \"string\"\n  ],\n  \"currentTimezoneOffset\": 0,\n  \"timezoneDesignator\": \"string\",\n  \"modifiedDate\": \"YYYY-08-24T14:15:22Z\",\n  \"createdDate\": \"YYYY-08-24T14:15:22Z\",\n  \"organization\": \"string\",\n  \"modifiedBy\": \"string\",\n  \"curationEnabled\": true,\n  \"recentRecordedAccess\": \"YYYY-08-24\",\n  \"sessionDefinition\": [{}],\n  \"curatedComponents\": [{}],\n  \"externalData\": {\n    \"externalId\": \"string\",\n    \"externalParentId\": \"string\"\n    },\n  \"containerNames\": {\n    \"event\": \"string\",\n    \"session\": \"string\",\n    \"people\": \"string\"\n  },\n  \"id\": \"string\"\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}